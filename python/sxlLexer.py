# Generated from sxl.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\63")
        buf.write("\u0184\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3")
        buf.write("\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3")
        buf.write("\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3!\3!\3")
        buf.write("\"\3\"\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3")
        buf.write("&\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3)\3)\5)")
        buf.write("\u013d\n)\3)\3)\3*\3*\3*\6*\u0144\n*\r*\16*\u0145\3+\5")
        buf.write("+\u0149\n+\3+\3+\3,\3,\3,\6,\u0150\n,\r,\16,\u0151\3-")
        buf.write("\3-\3.\3.\3/\5/\u0159\n/\3/\3/\3\60\3\60\5\60\u015f\n")
        buf.write("\60\3\61\3\61\7\61\u0163\n\61\f\61\16\61\u0166\13\61\3")
        buf.write("\62\3\62\7\62\u016a\n\62\f\62\16\62\u016d\13\62\3\63\3")
        buf.write("\63\6\63\u0171\n\63\r\63\16\63\u0172\3\64\3\64\7\64\u0177")
        buf.write("\n\64\f\64\16\64\u017a\13\64\3\64\3\64\3\65\6\65\u017f")
        buf.write("\n\65\r\65\16\65\u0180\3\65\3\65\2\2\66\3\3\5\4\7\5\t")
        buf.write("\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W\2Y-[.]")
        buf.write("/_\2a\2c\60e\61g\62i\63\3\2\f\3\2\62\62\4\2ZZzz\5\2\62")
        buf.write(";CHch\3\2\62;\3\2\63;\4\2C\\c|\5\2\62;C\\c|\5\2/\61<<")
        buf.write("aa\6\2\f\f\17\17}}\177\177\5\2\13\f\17\17\"\"\2\u018c")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2c\3\2")
        buf.write("\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5r\3")
        buf.write("\2\2\2\7t\3\2\2\2\tv\3\2\2\2\13}\3\2\2\2\r\u0087\3\2\2")
        buf.write("\2\17\u008f\3\2\2\2\21\u0095\3\2\2\2\23\u009a\3\2\2\2")
        buf.write("\25\u009f\3\2\2\2\27\u00a4\3\2\2\2\31\u00aa\3\2\2\2\33")
        buf.write("\u00b1\3\2\2\2\35\u00b4\3\2\2\2\37\u00b7\3\2\2\2!\u00ba")
        buf.write("\3\2\2\2#\u00bf\3\2\2\2%\u00c1\3\2\2\2\'\u00c7\3\2\2\2")
        buf.write(")\u00ce\3\2\2\2+\u00d4\3\2\2\2-\u00db\3\2\2\2/\u00e2\3")
        buf.write("\2\2\2\61\u00e8\3\2\2\2\63\u00ef\3\2\2\2\65\u00f6\3\2")
        buf.write("\2\2\67\u00fe\3\2\2\29\u0103\3\2\2\2;\u0108\3\2\2\2=\u010c")
        buf.write("\3\2\2\2?\u0112\3\2\2\2A\u0116\3\2\2\2C\u011b\3\2\2\2")
        buf.write("E\u011d\3\2\2\2G\u011f\3\2\2\2I\u0125\3\2\2\2K\u012a\3")
        buf.write("\2\2\2M\u012f\3\2\2\2O\u0133\3\2\2\2Q\u0137\3\2\2\2S\u0140")
        buf.write("\3\2\2\2U\u0148\3\2\2\2W\u014c\3\2\2\2Y\u0153\3\2\2\2")
        buf.write("[\u0155\3\2\2\2]\u0158\3\2\2\2_\u015e\3\2\2\2a\u0160\3")
        buf.write("\2\2\2c\u0167\3\2\2\2e\u0170\3\2\2\2g\u0174\3\2\2\2i\u017e")
        buf.write("\3\2\2\2kl\7k\2\2lm\7o\2\2mn\7r\2\2no\7q\2\2op\7t\2\2")
        buf.write("pq\7v\2\2q\4\3\2\2\2rs\7}\2\2s\6\3\2\2\2tu\7\177\2\2u")
        buf.write("\b\3\2\2\2vw\7d\2\2wx\7n\2\2xy\7q\2\2yz\7e\2\2z{\7m\2")
        buf.write("\2{|\7u\2\2|\n\3\2\2\2}~\7t\2\2~\177\7g\2\2\177\u0080")
        buf.write("\7i\2\2\u0080\u0081\7k\2\2\u0081\u0082\7u\2\2\u0082\u0083")
        buf.write("\7v\2\2\u0083\u0084\7g\2\2\u0084\u0085\7t\2\2\u0085\u0086")
        buf.write("\7u\2\2\u0086\f\3\2\2\2\u0087\u0088\7u\2\2\u0088\u0089")
        buf.write("\7k\2\2\u0089\u008a\7i\2\2\u008a\u008b\7p\2\2\u008b\u008c")
        buf.write("\7c\2\2\u008c\u008d\7n\2\2\u008d\u008e\7u\2\2\u008e\16")
        buf.write("\3\2\2\2\u008f\u0090\7g\2\2\u0090\u0091\7p\2\2\u0091\u0092")
        buf.write("\7w\2\2\u0092\u0093\7o\2\2\u0093\u0094\7u\2\2\u0094\20")
        buf.write("\3\2\2\2\u0095\u0096\7f\2\2\u0096\u0097\7g\2\2\u0097\u0098")
        buf.write("\7u\2\2\u0098\u0099\7e\2\2\u0099\22\3\2\2\2\u009a\u009b")
        buf.write("\7c\2\2\u009b\u009c\7f\2\2\u009c\u009d\7f\2\2\u009d\u009e")
        buf.write("\7t\2\2\u009e\24\3\2\2\2\u009f\u00a0\7u\2\2\u00a0\u00a1")
        buf.write("\7k\2\2\u00a1\u00a2\7|\2\2\u00a2\u00a3\7g\2\2\u00a3\26")
        buf.write("\3\2\2\2\u00a4\u00a5\7x\2\2\u00a5\u00a6\7c\2\2\u00a6\u00a7")
        buf.write("\7n\2\2\u00a7\u00a8\7w\2\2\u00a8\u00a9\7g\2\2\u00a9\30")
        buf.write("\3\2\2\2\u00aa\u00ab\7p\2\2\u00ab\u00ac\7q\2\2\u00ac\u00ad")
        buf.write("\7v\2\2\u00ad\u00ae\7k\2\2\u00ae\u00af\7h\2\2\u00af\u00b0")
        buf.write("\7{\2\2\u00b0\32\3\2\2\2\u00b1\u00b2\7t\2\2\u00b2\u00b3")
        buf.write("\7y\2\2\u00b3\34\3\2\2\2\u00b4\u00b5\7t\2\2\u00b5\u00b6")
        buf.write("\7q\2\2\u00b6\36\3\2\2\2\u00b7\u00b8\7y\2\2\u00b8\u00b9")
        buf.write("\7q\2\2\u00b9 \3\2\2\2\u00ba\u00bb\7w\2\2\u00bb\u00bc")
        buf.write("\7p\2\2\u00bc\u00bd\7k\2\2\u00bd\u00be\7v\2\2\u00be\"")
        buf.write("\3\2\2\2\u00bf\u00c0\7/\2\2\u00c0$\3\2\2\2\u00c1\u00c2")
        buf.write("\7R\2\2\u00c2\u00c3\7g\2\2\u00c3\u00c4\7t\2\2\u00c4\u00c5")
        buf.write("\7e\2\2\u00c5\u00c6\7\60\2\2\u00c6&\3\2\2\2\u00c7\u00c8")
        buf.write("\7p\2\2\u00c8\u00c9\7w\2\2\u00c9\u00ca\7o\2\2\u00ca\u00cb")
        buf.write("\7t\2\2\u00cb\u00cc\7g\2\2\u00cc\u00cd\7r\2\2\u00cd(\3")
        buf.write("\2\2\2\u00ce\u00cf\7w\2\2\u00cf\u00d0\7k\2\2\u00d0\u00d1")
        buf.write("\7p\2\2\u00d1\u00d2\7v\2\2\u00d2\u00d3\7:\2\2\u00d3*\3")
        buf.write("\2\2\2\u00d4\u00d5\7w\2\2\u00d5\u00d6\7k\2\2\u00d6\u00d7")
        buf.write("\7p\2\2\u00d7\u00d8\7v\2\2\u00d8\u00d9\7\63\2\2\u00d9")
        buf.write("\u00da\78\2\2\u00da,\3\2\2\2\u00db\u00dc\7w\2\2\u00dc")
        buf.write("\u00dd\7k\2\2\u00dd\u00de\7p\2\2\u00de\u00df\7v\2\2\u00df")
        buf.write("\u00e0\7\65\2\2\u00e0\u00e1\7\64\2\2\u00e1.\3\2\2\2\u00e2")
        buf.write("\u00e3\7u\2\2\u00e3\u00e4\7k\2\2\u00e4\u00e5\7p\2\2\u00e5")
        buf.write("\u00e6\7v\2\2\u00e6\u00e7\7:\2\2\u00e7\60\3\2\2\2\u00e8")
        buf.write("\u00e9\7u\2\2\u00e9\u00ea\7k\2\2\u00ea\u00eb\7p\2\2\u00eb")
        buf.write("\u00ec\7v\2\2\u00ec\u00ed\7\63\2\2\u00ed\u00ee\78\2\2")
        buf.write("\u00ee\62\3\2\2\2\u00ef\u00f0\7u\2\2\u00f0\u00f1\7k\2")
        buf.write("\2\u00f1\u00f2\7p\2\2\u00f2\u00f3\7v\2\2\u00f3\u00f4\7")
        buf.write("\65\2\2\u00f4\u00f5\7\64\2\2\u00f5\64\3\2\2\2\u00f6\u00f7")
        buf.write("\7w\2\2\u00f7\u00f8\7h\2\2\u00f8\u00f9\7k\2\2\u00f9\u00fa")
        buf.write("\7z\2\2\u00fa\u00fb\7:\2\2\u00fb\u00fc\7\60\2\2\u00fc")
        buf.write("\u00fd\7:\2\2\u00fd\66\3\2\2\2\u00fe\u00ff\7g\2\2\u00ff")
        buf.write("\u0100\7p\2\2\u0100\u0101\7w\2\2\u0101\u0102\7o\2\2\u0102")
        buf.write("8\3\2\2\2\u0103\u0104\7d\2\2\u0104\u0105\7q\2\2\u0105")
        buf.write("\u0106\7q\2\2\u0106\u0107\7n\2\2\u0107:\3\2\2\2\u0108")
        buf.write("\u0109\7t\2\2\u0109\u010a\7c\2\2\u010a\u010b\7y\2\2\u010b")
        buf.write("<\3\2\2\2\u010c\u010d\7t\2\2\u010d\u010e\7c\2\2\u010e")
        buf.write("\u010f\7p\2\2\u010f\u0110\7i\2\2\u0110\u0111\7g\2\2\u0111")
        buf.write(">\3\2\2\2\u0112\u0113\7r\2\2\u0113\u0114\7q\2\2\u0114")
        buf.write("\u0115\7u\2\2\u0115@\3\2\2\2\u0116\u0117\7o\2\2\u0117")
        buf.write("\u0118\7q\2\2\u0118\u0119\7f\2\2\u0119\u011a\7g\2\2\u011a")
        buf.write("B\3\2\2\2\u011b\u011c\7v\2\2\u011cD\3\2\2\2\u011d\u011e")
        buf.write("\7e\2\2\u011eF\3\2\2\2\u011f\u0120\7t\2\2\u0120\u0121")
        buf.write("\7g\2\2\u0121\u0122\7u\2\2\u0122\u0123\7g\2\2\u0123\u0124")
        buf.write("\7v\2\2\u0124H\3\2\2\2\u0125\u0126\7v\2\2\u0126\u0127")
        buf.write("\7{\2\2\u0127\u0128\7r\2\2\u0128\u0129\7g\2\2\u0129J\3")
        buf.write("\2\2\2\u012a\u012b\7h\2\2\u012b\u012c\7n\2\2\u012c\u012d")
        buf.write("\7c\2\2\u012d\u012e\7i\2\2\u012eL\3\2\2\2\u012f\u0130")
        buf.write("\5U+\2\u0130\u0131\7<\2\2\u0131\u0132\5U+\2\u0132N\3\2")
        buf.write("\2\2\u0133\u0134\5[.\2\u0134\u0135\7<\2\2\u0135\u0136")
        buf.write("\5[.\2\u0136P\3\2\2\2\u0137\u0138\5]/\2\u0138\u013c\7")
        buf.write("<\2\2\u0139\u013a\5Y-\2\u013a\u013b\7<\2\2\u013b\u013d")
        buf.write("\3\2\2\2\u013c\u0139\3\2\2\2\u013c\u013d\3\2\2\2\u013d")
        buf.write("\u013e\3\2\2\2\u013e\u013f\5]/\2\u013fR\3\2\2\2\u0140")
        buf.write("\u0141\t\2\2\2\u0141\u0143\t\3\2\2\u0142\u0144\t\4\2\2")
        buf.write("\u0143\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0143\3")
        buf.write("\2\2\2\u0145\u0146\3\2\2\2\u0146T\3\2\2\2\u0147\u0149")
        buf.write("\7/\2\2\u0148\u0147\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014b\5W,\2\u014bV\3\2\2\2\u014c")
        buf.write("\u014d\5_\60\2\u014d\u014f\7\60\2\2\u014e\u0150\t\5\2")
        buf.write("\2\u014f\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u014f")
        buf.write("\3\2\2\2\u0151\u0152\3\2\2\2\u0152X\3\2\2\2\u0153\u0154")
        buf.write("\5a\61\2\u0154Z\3\2\2\2\u0155\u0156\5_\60\2\u0156\\\3")
        buf.write("\2\2\2\u0157\u0159\7/\2\2\u0158\u0157\3\2\2\2\u0158\u0159")
        buf.write("\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\5_\60\2\u015b")
        buf.write("^\3\2\2\2\u015c\u015f\7\62\2\2\u015d\u015f\5a\61\2\u015e")
        buf.write("\u015c\3\2\2\2\u015e\u015d\3\2\2\2\u015f`\3\2\2\2\u0160")
        buf.write("\u0164\t\6\2\2\u0161\u0163\t\5\2\2\u0162\u0161\3\2\2\2")
        buf.write("\u0163\u0166\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0165\3")
        buf.write("\2\2\2\u0165b\3\2\2\2\u0166\u0164\3\2\2\2\u0167\u016b")
        buf.write("\t\7\2\2\u0168\u016a\t\b\2\2\u0169\u0168\3\2\2\2\u016a")
        buf.write("\u016d\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2")
        buf.write("\u016cd\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u0171\5c\62")
        buf.write("\2\u016f\u0171\t\t\2\2\u0170\u016e\3\2\2\2\u0170\u016f")
        buf.write("\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0170\3\2\2\2\u0172")
        buf.write("\u0173\3\2\2\2\u0173f\3\2\2\2\u0174\u0178\7}\2\2\u0175")
        buf.write("\u0177\n\n\2\2\u0176\u0175\3\2\2\2\u0177\u017a\3\2\2\2")
        buf.write("\u0178\u0176\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017b\3")
        buf.write("\2\2\2\u017a\u0178\3\2\2\2\u017b\u017c\7\177\2\2\u017c")
        buf.write("h\3\2\2\2\u017d\u017f\t\13\2\2\u017e\u017d\3\2\2\2\u017f")
        buf.write("\u0180\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2")
        buf.write("\u0181\u0182\3\2\2\2\u0182\u0183\b\65\2\2\u0183j\3\2\2")
        buf.write("\2\17\2\u013c\u0145\u0148\u0151\u0158\u015e\u0164\u016b")
        buf.write("\u0170\u0172\u0178\u0180\3\b\2\2")
        return buf.getvalue()


class sxlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    Fix_range = 38
    Nat_range = 39
    Int_range = 40
    HEX = 41
    Fixpoint = 42
    Positive = 43
    Natural = 44
    Integer = 45
    LABEL = 46
    EXT_LABEL = 47
    STRING = 48
    WS = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'import'", "'{'", "'}'", "'blocks'", "'registers'", "'signals'", 
            "'enums'", "'desc'", "'addr'", "'size'", "'value'", "'notify'", 
            "'rw'", "'ro'", "'wo'", "'unit'", "'-'", "'Perc.'", "'numrep'", 
            "'uint8'", "'uint16'", "'uint32'", "'sint8'", "'sint16'", "'sint32'", 
            "'ufix8.8'", "'enum'", "'bool'", "'raw'", "'range'", "'pos'", 
            "'mode'", "'t'", "'c'", "'reset'", "'type'", "'flag'" ]

    symbolicNames = [ "<INVALID>",
            "Fix_range", "Nat_range", "Int_range", "HEX", "Fixpoint", "Positive", 
            "Natural", "Integer", "LABEL", "EXT_LABEL", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "Fix_range", 
                  "Nat_range", "Int_range", "HEX", "Fixpoint", "FIX", "Positive", 
                  "Natural", "Integer", "INT", "POS", "LABEL", "EXT_LABEL", 
                  "STRING", "WS" ]

    grammarFileName = "sxl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


