# Generated from sxl.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62")
        buf.write("\u017b\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3#\3#\3#\3#\3")
        buf.write("$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3(\3(\3(\3(\3(\5(\u0134\n(\3(\3(\3)\3)\3)\6)\u013b")
        buf.write("\n)\r)\16)\u013c\3*\5*\u0140\n*\3*\3*\3+\3+\3+\6+\u0147")
        buf.write("\n+\r+\16+\u0148\3,\3,\3-\3-\3.\5.\u0150\n.\3.\3.\3/\3")
        buf.write("/\5/\u0156\n/\3\60\3\60\7\60\u015a\n\60\f\60\16\60\u015d")
        buf.write("\13\60\3\61\3\61\7\61\u0161\n\61\f\61\16\61\u0164\13\61")
        buf.write("\3\62\3\62\6\62\u0168\n\62\r\62\16\62\u0169\3\63\3\63")
        buf.write("\7\63\u016e\n\63\f\63\16\63\u0171\13\63\3\63\3\63\3\64")
        buf.write("\6\64\u0176\n\64\r\64\16\64\u0177\3\64\3\64\2\2\65\3\3")
        buf.write("\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U\2W,Y-[.]\2_\2a/c\60e\61g\62\3\2\f\3\2\62\62\4\2ZZ")
        buf.write("zz\5\2\62;CHch\3\2\62;\3\2\63;\4\2C\\c|\5\2\62;C\\c|\5")
        buf.write("\2/\60<<aa\6\2\f\f\17\17}}\177\177\5\2\13\f\17\17\"\"")
        buf.write("\2\u0183\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2")
        buf.write("\2\2S\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2a\3\2")
        buf.write("\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\3i\3\2\2\2\5p\3")
        buf.write("\2\2\2\7r\3\2\2\2\tt\3\2\2\2\13~\3\2\2\2\r\u0086\3\2\2")
        buf.write("\2\17\u008c\3\2\2\2\21\u0091\3\2\2\2\23\u0096\3\2\2\2")
        buf.write("\25\u009b\3\2\2\2\27\u00a1\3\2\2\2\31\u00a8\3\2\2\2\33")
        buf.write("\u00ab\3\2\2\2\35\u00ae\3\2\2\2\37\u00b1\3\2\2\2!\u00b6")
        buf.write("\3\2\2\2#\u00b8\3\2\2\2%\u00be\3\2\2\2\'\u00c5\3\2\2\2")
        buf.write(")\u00cb\3\2\2\2+\u00d2\3\2\2\2-\u00d9\3\2\2\2/\u00df\3")
        buf.write("\2\2\2\61\u00e6\3\2\2\2\63\u00ed\3\2\2\2\65\u00f5\3\2")
        buf.write("\2\2\67\u00fa\3\2\2\29\u00ff\3\2\2\2;\u0103\3\2\2\2=\u0109")
        buf.write("\3\2\2\2?\u010d\3\2\2\2A\u0112\3\2\2\2C\u0114\3\2\2\2")
        buf.write("E\u0116\3\2\2\2G\u011c\3\2\2\2I\u0121\3\2\2\2K\u0126\3")
        buf.write("\2\2\2M\u012a\3\2\2\2O\u012e\3\2\2\2Q\u0137\3\2\2\2S\u013f")
        buf.write("\3\2\2\2U\u0143\3\2\2\2W\u014a\3\2\2\2Y\u014c\3\2\2\2")
        buf.write("[\u014f\3\2\2\2]\u0155\3\2\2\2_\u0157\3\2\2\2a\u015e\3")
        buf.write("\2\2\2c\u0167\3\2\2\2e\u016b\3\2\2\2g\u0175\3\2\2\2ij")
        buf.write("\7d\2\2jk\7n\2\2kl\7q\2\2lm\7e\2\2mn\7m\2\2no\7u\2\2o")
        buf.write("\4\3\2\2\2pq\7}\2\2q\6\3\2\2\2rs\7\177\2\2s\b\3\2\2\2")
        buf.write("tu\7t\2\2uv\7g\2\2vw\7i\2\2wx\7k\2\2xy\7u\2\2yz\7v\2\2")
        buf.write("z{\7g\2\2{|\7t\2\2|}\7u\2\2}\n\3\2\2\2~\177\7u\2\2\177")
        buf.write("\u0080\7k\2\2\u0080\u0081\7i\2\2\u0081\u0082\7p\2\2\u0082")
        buf.write("\u0083\7c\2\2\u0083\u0084\7n\2\2\u0084\u0085\7u\2\2\u0085")
        buf.write("\f\3\2\2\2\u0086\u0087\7g\2\2\u0087\u0088\7p\2\2\u0088")
        buf.write("\u0089\7w\2\2\u0089\u008a\7o\2\2\u008a\u008b\7u\2\2\u008b")
        buf.write("\16\3\2\2\2\u008c\u008d\7f\2\2\u008d\u008e\7g\2\2\u008e")
        buf.write("\u008f\7u\2\2\u008f\u0090\7e\2\2\u0090\20\3\2\2\2\u0091")
        buf.write("\u0092\7c\2\2\u0092\u0093\7f\2\2\u0093\u0094\7f\2\2\u0094")
        buf.write("\u0095\7t\2\2\u0095\22\3\2\2\2\u0096\u0097\7u\2\2\u0097")
        buf.write("\u0098\7k\2\2\u0098\u0099\7|\2\2\u0099\u009a\7g\2\2\u009a")
        buf.write("\24\3\2\2\2\u009b\u009c\7x\2\2\u009c\u009d\7c\2\2\u009d")
        buf.write("\u009e\7n\2\2\u009e\u009f\7w\2\2\u009f\u00a0\7g\2\2\u00a0")
        buf.write("\26\3\2\2\2\u00a1\u00a2\7p\2\2\u00a2\u00a3\7q\2\2\u00a3")
        buf.write("\u00a4\7v\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6\7h\2\2\u00a6")
        buf.write("\u00a7\7{\2\2\u00a7\30\3\2\2\2\u00a8\u00a9\7t\2\2\u00a9")
        buf.write("\u00aa\7y\2\2\u00aa\32\3\2\2\2\u00ab\u00ac\7t\2\2\u00ac")
        buf.write("\u00ad\7q\2\2\u00ad\34\3\2\2\2\u00ae\u00af\7y\2\2\u00af")
        buf.write("\u00b0\7q\2\2\u00b0\36\3\2\2\2\u00b1\u00b2\7w\2\2\u00b2")
        buf.write("\u00b3\7p\2\2\u00b3\u00b4\7k\2\2\u00b4\u00b5\7v\2\2\u00b5")
        buf.write(" \3\2\2\2\u00b6\u00b7\7/\2\2\u00b7\"\3\2\2\2\u00b8\u00b9")
        buf.write("\7R\2\2\u00b9\u00ba\7g\2\2\u00ba\u00bb\7t\2\2\u00bb\u00bc")
        buf.write("\7e\2\2\u00bc\u00bd\7\60\2\2\u00bd$\3\2\2\2\u00be\u00bf")
        buf.write("\7p\2\2\u00bf\u00c0\7w\2\2\u00c0\u00c1\7o\2\2\u00c1\u00c2")
        buf.write("\7t\2\2\u00c2\u00c3\7g\2\2\u00c3\u00c4\7r\2\2\u00c4&\3")
        buf.write("\2\2\2\u00c5\u00c6\7w\2\2\u00c6\u00c7\7k\2\2\u00c7\u00c8")
        buf.write("\7p\2\2\u00c8\u00c9\7v\2\2\u00c9\u00ca\7:\2\2\u00ca(\3")
        buf.write("\2\2\2\u00cb\u00cc\7w\2\2\u00cc\u00cd\7k\2\2\u00cd\u00ce")
        buf.write("\7p\2\2\u00ce\u00cf\7v\2\2\u00cf\u00d0\7\63\2\2\u00d0")
        buf.write("\u00d1\78\2\2\u00d1*\3\2\2\2\u00d2\u00d3\7w\2\2\u00d3")
        buf.write("\u00d4\7k\2\2\u00d4\u00d5\7p\2\2\u00d5\u00d6\7v\2\2\u00d6")
        buf.write("\u00d7\7\65\2\2\u00d7\u00d8\7\64\2\2\u00d8,\3\2\2\2\u00d9")
        buf.write("\u00da\7u\2\2\u00da\u00db\7k\2\2\u00db\u00dc\7p\2\2\u00dc")
        buf.write("\u00dd\7v\2\2\u00dd\u00de\7:\2\2\u00de.\3\2\2\2\u00df")
        buf.write("\u00e0\7u\2\2\u00e0\u00e1\7k\2\2\u00e1\u00e2\7p\2\2\u00e2")
        buf.write("\u00e3\7v\2\2\u00e3\u00e4\7\63\2\2\u00e4\u00e5\78\2\2")
        buf.write("\u00e5\60\3\2\2\2\u00e6\u00e7\7u\2\2\u00e7\u00e8\7k\2")
        buf.write("\2\u00e8\u00e9\7p\2\2\u00e9\u00ea\7v\2\2\u00ea\u00eb\7")
        buf.write("\65\2\2\u00eb\u00ec\7\64\2\2\u00ec\62\3\2\2\2\u00ed\u00ee")
        buf.write("\7w\2\2\u00ee\u00ef\7h\2\2\u00ef\u00f0\7k\2\2\u00f0\u00f1")
        buf.write("\7z\2\2\u00f1\u00f2\7:\2\2\u00f2\u00f3\7\60\2\2\u00f3")
        buf.write("\u00f4\7:\2\2\u00f4\64\3\2\2\2\u00f5\u00f6\7g\2\2\u00f6")
        buf.write("\u00f7\7p\2\2\u00f7\u00f8\7w\2\2\u00f8\u00f9\7o\2\2\u00f9")
        buf.write("\66\3\2\2\2\u00fa\u00fb\7d\2\2\u00fb\u00fc\7q\2\2\u00fc")
        buf.write("\u00fd\7q\2\2\u00fd\u00fe\7n\2\2\u00fe8\3\2\2\2\u00ff")
        buf.write("\u0100\7t\2\2\u0100\u0101\7c\2\2\u0101\u0102\7y\2\2\u0102")
        buf.write(":\3\2\2\2\u0103\u0104\7t\2\2\u0104\u0105\7c\2\2\u0105")
        buf.write("\u0106\7p\2\2\u0106\u0107\7i\2\2\u0107\u0108\7g\2\2\u0108")
        buf.write("<\3\2\2\2\u0109\u010a\7r\2\2\u010a\u010b\7q\2\2\u010b")
        buf.write("\u010c\7u\2\2\u010c>\3\2\2\2\u010d\u010e\7o\2\2\u010e")
        buf.write("\u010f\7q\2\2\u010f\u0110\7f\2\2\u0110\u0111\7g\2\2\u0111")
        buf.write("@\3\2\2\2\u0112\u0113\7v\2\2\u0113B\3\2\2\2\u0114\u0115")
        buf.write("\7e\2\2\u0115D\3\2\2\2\u0116\u0117\7t\2\2\u0117\u0118")
        buf.write("\7g\2\2\u0118\u0119\7u\2\2\u0119\u011a\7g\2\2\u011a\u011b")
        buf.write("\7v\2\2\u011bF\3\2\2\2\u011c\u011d\7v\2\2\u011d\u011e")
        buf.write("\7{\2\2\u011e\u011f\7r\2\2\u011f\u0120\7g\2\2\u0120H\3")
        buf.write("\2\2\2\u0121\u0122\7h\2\2\u0122\u0123\7n\2\2\u0123\u0124")
        buf.write("\7c\2\2\u0124\u0125\7i\2\2\u0125J\3\2\2\2\u0126\u0127")
        buf.write("\5S*\2\u0127\u0128\7<\2\2\u0128\u0129\5S*\2\u0129L\3\2")
        buf.write("\2\2\u012a\u012b\5Y-\2\u012b\u012c\7<\2\2\u012c\u012d")
        buf.write("\5Y-\2\u012dN\3\2\2\2\u012e\u012f\5[.\2\u012f\u0133\7")
        buf.write("<\2\2\u0130\u0131\5W,\2\u0131\u0132\7<\2\2\u0132\u0134")
        buf.write("\3\2\2\2\u0133\u0130\3\2\2\2\u0133\u0134\3\2\2\2\u0134")
        buf.write("\u0135\3\2\2\2\u0135\u0136\5[.\2\u0136P\3\2\2\2\u0137")
        buf.write("\u0138\t\2\2\2\u0138\u013a\t\3\2\2\u0139\u013b\t\4\2\2")
        buf.write("\u013a\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013a\3")
        buf.write("\2\2\2\u013c\u013d\3\2\2\2\u013dR\3\2\2\2\u013e\u0140")
        buf.write("\7/\2\2\u013f\u013e\3\2\2\2\u013f\u0140\3\2\2\2\u0140")
        buf.write("\u0141\3\2\2\2\u0141\u0142\5U+\2\u0142T\3\2\2\2\u0143")
        buf.write("\u0144\5]/\2\u0144\u0146\7\60\2\2\u0145\u0147\t\5\2\2")
        buf.write("\u0146\u0145\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u0146\3")
        buf.write("\2\2\2\u0148\u0149\3\2\2\2\u0149V\3\2\2\2\u014a\u014b")
        buf.write("\5_\60\2\u014bX\3\2\2\2\u014c\u014d\5]/\2\u014dZ\3\2\2")
        buf.write("\2\u014e\u0150\7/\2\2\u014f\u014e\3\2\2\2\u014f\u0150")
        buf.write("\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0152\5]/\2\u0152\\")
        buf.write("\3\2\2\2\u0153\u0156\7\62\2\2\u0154\u0156\5_\60\2\u0155")
        buf.write("\u0153\3\2\2\2\u0155\u0154\3\2\2\2\u0156^\3\2\2\2\u0157")
        buf.write("\u015b\t\6\2\2\u0158\u015a\t\5\2\2\u0159\u0158\3\2\2\2")
        buf.write("\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c\3")
        buf.write("\2\2\2\u015c`\3\2\2\2\u015d\u015b\3\2\2\2\u015e\u0162")
        buf.write("\t\7\2\2\u015f\u0161\t\b\2\2\u0160\u015f\3\2\2\2\u0161")
        buf.write("\u0164\3\2\2\2\u0162\u0160\3\2\2\2\u0162\u0163\3\2\2\2")
        buf.write("\u0163b\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0168\5a\61")
        buf.write("\2\u0166\u0168\t\t\2\2\u0167\u0165\3\2\2\2\u0167\u0166")
        buf.write("\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u0167\3\2\2\2\u0169")
        buf.write("\u016a\3\2\2\2\u016ad\3\2\2\2\u016b\u016f\7}\2\2\u016c")
        buf.write("\u016e\n\n\2\2\u016d\u016c\3\2\2\2\u016e\u0171\3\2\2\2")
        buf.write("\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0172\3")
        buf.write("\2\2\2\u0171\u016f\3\2\2\2\u0172\u0173\7\177\2\2\u0173")
        buf.write("f\3\2\2\2\u0174\u0176\t\13\2\2\u0175\u0174\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2")
        buf.write("\u0178\u0179\3\2\2\2\u0179\u017a\b\64\2\2\u017ah\3\2\2")
        buf.write("\2\17\2\u0133\u013c\u013f\u0148\u014f\u0155\u015b\u0162")
        buf.write("\u0167\u0169\u016f\u0177\3\b\2\2")
        return buf.getvalue()


class sxlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    Fix_range = 37
    Nat_range = 38
    Int_range = 39
    HEX = 40
    Fixpoint = 41
    Positive = 42
    Natural = 43
    Integer = 44
    LABEL = 45
    EXT_LABEL = 46
    STRING = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'blocks'", "'{'", "'}'", "'registers'", "'signals'", "'enums'", 
            "'desc'", "'addr'", "'size'", "'value'", "'notify'", "'rw'", 
            "'ro'", "'wo'", "'unit'", "'-'", "'Perc.'", "'numrep'", "'uint8'", 
            "'uint16'", "'uint32'", "'sint8'", "'sint16'", "'sint32'", "'ufix8.8'", 
            "'enum'", "'bool'", "'raw'", "'range'", "'pos'", "'mode'", "'t'", 
            "'c'", "'reset'", "'type'", "'flag'" ]

    symbolicNames = [ "<INVALID>",
            "Fix_range", "Nat_range", "Int_range", "HEX", "Fixpoint", "Positive", 
            "Natural", "Integer", "LABEL", "EXT_LABEL", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "Fix_range", "Nat_range", 
                  "Int_range", "HEX", "Fixpoint", "FIX", "Positive", "Natural", 
                  "Integer", "INT", "POS", "LABEL", "EXT_LABEL", "STRING", 
                  "WS" ]

    grammarFileName = "sxl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


